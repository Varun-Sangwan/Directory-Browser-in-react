{"ast":null,"code":"var _jsxFileName = \"/Users/Varun/Data/Workspace/The career path/React/file-browser/src/components/Explorer/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Folder from \"../Folder\";\nimport File from \"../File\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Explorer({\n  folderItems\n}) {\n  _s();\n\n  let nestedFolder = [];\n  const [items, setItems] = useState(folderItems);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  function toggleFolder() {\n    items.isOpen = !items.isOpen;\n    setItems({ ...items\n    });\n  }\n\n  function addNewFolder() {\n    items.children.push({\n      type: \"folder\",\n      name: \"\",\n      isOpen: false,\n      children: []\n    });\n    items.isOpen = true;\n    setItems({ ...items\n    });\n  }\n\n  function addNewFile() {\n    items.children.push({\n      type: \"file\",\n      name: \"\",\n      children: []\n    });\n    items.isOpen = true;\n    setItems({ ...items\n    });\n  }\n\n  function emptyFolder() {\n    items.children = [];\n    setItems({ ...items\n    });\n  }\n\n  function renderItemName() {\n    return items.name ? items.name : /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"enter thename here\",\n      value: inputValue,\n      onChange: event => {\n        setInputValue(event.target.value);\n      },\n      onBlur: event => {\n        items.name = event.target.value;\n        setItems({ ...items\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (items.children.length > 0) {\n    nestedFolder = items.children.map((item, index) => /*#__PURE__*/_jsxDEV(Explorer, {\n      folderItems: item\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"explorer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"displayHierarchy\",\n      children: items.type === \"folder\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Folder, {\n          items: items,\n          name: renderItemName(),\n          open: items.isOpen && items.children.length ? \"open\" : \"close\",\n          toggleFolder: toggleFolder\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewFolder,\n          children: \"New Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewFile,\n          children: \"New File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: emptyFolder,\n          children: \"Empty Folder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(File, {\n        name: renderItemName()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), items.isOpen ? nestedFolder : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Explorer, \"BLKTGflhjVKQ8I+ENPd7xWtS/7Q=\");\n\n_c = Explorer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Explorer\");","map":{"version":3,"sources":["/Users/Varun/Data/Workspace/The career path/React/file-browser/src/components/Explorer/index.js"],"names":["React","useState","Folder","File","Explorer","folderItems","nestedFolder","items","setItems","inputValue","setInputValue","toggleFolder","isOpen","addNewFolder","children","push","type","name","addNewFile","emptyFolder","renderItemName","event","target","value","length","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Folder from \"../Folder\";\nimport File from \"../File\";\nimport \"./index.css\";\n\nexport default function Explorer({ folderItems }) {\n  let nestedFolder = [];\n  const [items, setItems] = useState(folderItems);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  function toggleFolder() {\n    items.isOpen = !items.isOpen;\n    setItems({ ...items });\n  }\n\n  function addNewFolder() {\n    items.children.push({\n      type: \"folder\",\n      name: \"\",\n      isOpen: false,\n      children: [],\n    });\n    items.isOpen = true;\n    setItems({ ...items });\n  }\n\n  function addNewFile() {\n    items.children.push({\n      type: \"file\",\n      name: \"\",\n      children: [],\n    });\n    items.isOpen = true;\n    setItems({ ...items });\n  }\n\n  function emptyFolder() {\n    items.children = [];\n    setItems({ ...items });\n  }\n\n  function renderItemName() {\n    return items.name ? (\n      items.name\n    ) : (\n      <input\n        type=\"text\"\n        placeholder=\"enter thename here\"\n        value={inputValue}\n        onChange={(event) => {\n          setInputValue(event.target.value);\n        }}\n        onBlur={(event) => {\n          items.name = event.target.value;\n          setItems({ ...items });\n        }}\n      />\n    );\n  }\n\n  if (items.children.length > 0) {\n    nestedFolder = items.children.map((item, index) => (\n      <Explorer key={index} folderItems={item} />\n    ));\n  }\n\n  return (\n    <div className=\"explorer\">\n      <div className=\"displayHierarchy\">\n        {items.type === \"folder\" ? (\n          <>\n            <Folder\n              items={items}\n              name={renderItemName()}\n              open={items.isOpen && items.children.length ? \"open\" : \"close\"}\n              toggleFolder={toggleFolder}\n            />\n            <button onClick={addNewFolder}>New Folder</button>\n            <button onClick={addNewFile}>New File</button>\n            <button onClick={emptyFolder}>Empty Folder</button>\n          </>\n        ) : (\n          <File name={renderItemName()} />\n        )}\n      </div>\n      {items.isOpen ? nestedFolder : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}